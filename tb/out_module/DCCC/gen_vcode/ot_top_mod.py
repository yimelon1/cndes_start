from __future__ import print_function


# biassram ver3 instance
#ctrl+c :: python ot_top_mod.py
#----change-------------



need_ident = 0
if( need_ident ):
	idnt0 = '    '
	cline = '\n'
	fname_idn = '_withidn'
else :
	idnt0 = ''
	cline = ''
	fname_idn = ''

def un_ident(  file , num , dec_type , port_name ):
	file.write("{0}".format(dec_type))
	for i in range( num ):
		if( i == num-1):
			file.write("{1:s}_{2:d} ; {0:s}".format( '\n' ,port_name , i))
		else :
			file.write("{1:s}_{2:d} ,".format(  '\n' ,port_name , i))

with open("./otsram_top/ottop_"+fname_idn+".v", "w") as fp:


	# declare
	fp.write( '//----generated by ot_top_mod.py------ \n')
	fp.write( '//---- ot_top declare OT_SRAM start------ \n')

	un_ident( fp ,2 , 'wire ' , 'cen_otsr' )
	un_ident( fp ,2 , 'wire ' , 'wen_otsr' )
	un_ident( fp ,2 , 'wire [ 10 -1 : 0 ] ' , 'addr_otsr' )
	un_ident( fp ,2 , 'wire [ 64 -1 : 0 ] ' , 'din_otsr' )
	un_ident( fp ,2 , 'wire [ 64 -1 : 0 ] ' , 'dout_otsr' )

	fp.write( '//---- ot top declare OT_SRAM end------ \n')	


	fp.write( '\n')

	fp.write( '//----declare ot_top sram write signal start------ \n')
	un_ident( fp ,1 , 'wire ' , 'osw_cen_otsr' )
	un_ident( fp ,1 , 'wire ' , 'osw_wen_otsr' )
	un_ident( fp ,1 , 'wire [ 10 -1 : 0 ] ' , 'osw_addr_otsr' )
	un_ident( fp ,1 , 'wire [ 64 -1 : 0 ] ' , 'osw_din_otsr' )
	fp.write( '//----declare ot_top sram write signal  end------ \n')

	# instance
	fp.write( '//----generated by ot_top_mod.py------ \n')
	fp.write( '//----instance OT_SRAM start------ \n')
	for nfsram in range(  2 ):

		

		fp.write("OT_SRAM otbf_{2:d}({1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.Q{0:s}(	dout_otsr_{2:d} ),	{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.CLK{0:s}( clk ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.CEN{0:s}( cen_otsr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.WEN{0:s}( wen_otsr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.A{0:s}( addr_otsr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.D{0:s}( din_otsr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.EMA{0:s}( 3'b0 ){1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s});{1:s}".format(idnt0,cline,nfsram))
		fp.write("//----instance OT SRAM_{0:d}---------\n".format(nfsram))


	fp.write( '//----instance OT_SRAM end------ \n')	





	
# 		fp.write("|....\n")