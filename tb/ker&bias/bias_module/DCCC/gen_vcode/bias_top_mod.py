from __future__ import print_function


# biassram ver3 instance
#ctrl+c :: python bias_top_mod.py
#----change-------------



need_ident = 0
if( need_ident ):
	idnt0 = '    '
	cline = '\n'
	fname_idn = '_withidn'
else :
	idnt0 = ''
	cline = ''
	fname_idn = ''

def un_ident(  file , num , dec_type , port_name ):
	file.write("{0}".format(dec_type))
	for i in range( num ):
		if( i == num-1):
			file.write("{1:s}_{2:d} ; {0:s}".format( '\n' ,port_name , i))
		else :
			file.write("{1:s}_{2:d} ,".format(  '\n' ,port_name , i))

with open("./biassram_top/biastop_"+fname_idn+".v", "w") as fp:

	
	fp.write( '//----generated by bias_top_mod.py------ \n')



	# declare
	fp.write( '//----generated by bias_top_mod.py------ \n')
	fp.write( '//---- bias top declare BIAS_SRAM start------ \n')

	un_ident( fp ,1 , 'wire ' , 'cen_biassr' )
	un_ident( fp ,1 , 'wire ' , 'wen_biassr' )
	un_ident( fp ,1 , 'wire [ 9 -1 : 0 ] ' , 'addr_biassr' )
	un_ident( fp ,1 , 'wire [ 32 -1 : 0 ] ' , 'din_biassr' )

	fp.write( '//---- bias top declare BIAS_SRAM end------ \n')	

	fp.write( '\n')	

	fp.write( '//----declare bias_top sram read signal start------ \n')
	un_ident( fp ,1 , 'wire ' , 'bsr_cen_biassr' )
	un_ident( fp ,1 , 'wire ' , 'bsr_wen_biassr' )
	un_ident( fp ,1 , 'wire [ 9 -1 : 0 ] ' , 'bsr_addr_biassr' )

	fp.write( '//----declare bias_top sram read signal  end------ \n')

	fp.write( '\n')

	fp.write( '//----declare bias_top sram write signal start------ \n')
	un_ident( fp ,1 , 'wire ' , 'bsw_cen_biassr' )
	un_ident( fp ,1 , 'wire ' , 'bsw_wen_biassr' )
	un_ident( fp ,1 , 'wire [ 9 -1 : 0 ] ' , 'bsw_addr_biassr' )
	un_ident( fp ,1 , 'wire [ 32 -1 : 0 ] ' , 'bsw_din_biassr' )
	fp.write( '//----declare bias_top sram write signal  end------ \n')

	# instance
	fp.write( '//----generated by bias_top_mod.py------ \n')
	fp.write( '//----instance BIAS_SRAM start------ \n')
	for nfsram in range(  1 ):

		

		fp.write("BIAS_SRAM bias_{2:d}({1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.Q{0:s}(	dout_biassr_{2:d} ),	{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.CLK{0:s}( clk ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.CEN{0:s}( cen_biassr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.WEN{0:s}( wen_biassr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.A{0:s}( addr_biassr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.D{0:s}( din_biassr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.EMA{0:s}( 3'b0 ){1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s});{1:s}".format(idnt0,cline,nfsram))
		fp.write("//----instance KER SRAM_{0:d}---------\n".format(nfsram))


	fp.write( '//----instance BIAS_SRAM end------ \n')	



	# assign
	fp.write( '//----generated by bias_top_mod.py------ \n')	
	fp.write( '//----bias_top assign start------ \n')	
	fp.write( '//----bias_top assign cen ------ \n')	
	for nfsram in range(  1 ):
		fp.write("{0:s}assign cen_biassr_{2:d} = ( tst_sram_rw )? bsw_cen_biassr_{2:d} : bsr_cen_biassr_{2:d} ;{1:s}".format(idnt0,cline,nfsram))
	fp.write( '//----bias_top assign wen ------ \n')	
	for nfsram in range(  1 ):
		fp.write("{0:s}assign wen_biassr_{2:d} = ( tst_sram_rw )? bsw_wen_biassr_{2:d} : bsr_wen_biassr_{2:d} ;{1:s}".format(idnt0,cline,nfsram))
	fp.write( '//----bias_top assign addr ------ \n')	
	for nfsram in range(  1 ):
		fp.write("{0:s}assign addr_biassr_{2:d} =  ( tst_sram_rw )? bsw_addr_biassr_{2:d} : bsr_addr_biassr_{2:d} ;{1:s}".format(idnt0,cline,nfsram))
	fp.write( '//----bias_top assign din ------ \n')	
	for nfsram in range(  1 ):
		fp.write("{0:s}assign din_biassr_{2:d} =  ( tst_sram_rw )? bsw_din_biassr_{2:d} : 64'd0 ;{1:s}".format(idnt0,cline,nfsram))


	fp.write( '//----bias_top assign end------ \n')	

	# cen_biasr_0 ,wen_biasr_0 ,addr_biasr_0 ,din_biasr_0 ,//----bias SRAM_0---------
	un_ident( fp ,1 , 'wire ' , 'bsw_cen_biassr' )
	un_ident( fp ,1 , 'wire ' , 'bsw_wen_biassr' )
	un_ident( fp ,1 , 'wire [ 11 -1 : 0 ] ' , 'bsw_addr_biassr' )
	un_ident( fp ,1 , 'wire [ 64 -1 : 0 ] ' , 'bsw_din_biassr' )

	fp.write( '//----generated by bias_top_mod.py------ \n')	
	fp.write( '//----bias_top write module sram signal instanse------ \n')	
	for nfsram in range( 1 ):
		fp.write("{0:s}.cen_biasr_{2:d}{0:s}( bsw_cen_biassr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.wen_biasr_{2:d}{0:s}( bsw_wen_biassr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.addr_biasr_{2:d}{0:s}( bsw_addr_biassr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
		fp.write("{0:s}.din_biasr_{2:d}{0:s}( bsw_din_biassr_{2:d} ),{1:s}".format(idnt0,cline,nfsram))
	fp.write( '//----bias_top write module sram signal instanse end------ \n')	


	
# 		fp.write("|....\n")